#! /bin/bash

VERSION="v0.1.1"

# Detect Lua interpreter (prefer LuaJIT 2)
if [ ! -z "${LUA}" ]; then
  if [ -z "$(which ${LUA})" ]; then
    LUA=""
  fi
fi

if [ -z "${LUA}" ]; then
  LUA="luajit2"
  if [ -z "$(which ${LUA})" ]; then
    LUA="luajit"
    if [ -z "$(which ${LUA})" ]; then
      LUA="lua"

      if [ -z "$(which ${LUA})" ]; then
        echo "Error: luajit2, luajit and lua executables not found" >&2
        exit 1
      fi
    fi
  fi
fi

function version()
{
  cat << EOF
Lua to JSON translator ${VERSION}

EOF
}

function usage()
{
  cat << EOF
Usage:

  $0 [options] < in.lua > out.json

Options:

  -h    Print this text
  -v    Print script version
  -r    Prefix "return " to the input before loading (default: do not prefix)
  -G    Do not use global environment protection when loading the data
        (default: do use protection)
  -S    Expose Lua environment to the loaded data
        (default: load data into clean environment)

Notes:

  1. The lua2yaml by default expects the Lua data to be prefixed with `return`:

      return { foo = 42 }

  If your data is not, as follows:

      { foo = 42 }

  ...then use `-r` option.

  2. Note that while some attempts to sandbox the data are made,
     this tool does not provide any serious protection from malicious code
     (like malformed Lua bytecode, code with infinite loops,
     code that eats memory etc.)

     Do not use on Lua data that you do not trust.

EOF
}

PREFIX_WITH_RETURN=false
NO_STRICT=false
EXPOSE_G=false

while getopts ":hvrGS" opt; do
  case ${opt} in
    h)
      version
      usage
      exit 0
      ;;
    v)
      version
      exit 0
      ;;
    r)
      PREFIX_WITH_RETURN=true
      ;;
    G)
      NO_STRICT=true
      ;;
    S)
      EXPOSE_G=true
      ;;
    \?)
      echo "unknown option: -${OPTARG}" >&2
      exit 1
      ;;
    :)
      echo "option -${OPTARG} requires an argument" >&2
      exit 1
      ;;
  esac
done

${LUA} -e "

local PREFIX_WITH_RETURN = ${PREFIX_WITH_RETURN}
local NO_STRICT = ${NO_STRICT}
local EXPOSE_G = ${EXPOSE_G}

--------------------------------------------------------------------------------

pcall(require, 'luarocks.require') -- Ignoring errors

local json_encode, json_util
do
  local json, err = pcall(require, 'json')
  if not json then
    io.stdout:write(
        err, '\n\n',
        'try running \'luarocks install luajson\'', '\n'
      )
    io.stdout:flush()
    os.exit(1)
  end

  json_util = require('json.util')
  json_encode = require('json.encode')
end

--------------------------------------------------------------------------------

local input = assert(io.stdin:read('*a'))

-- TODO: Sandbox data?
if PREFIX_WITH_RETURN then
  input = 'return ' .. input
end

local env = setmetatable(
    { },
    {
      __metatable = 'lua2yaml.data';
      __index = index;
      __newindex = newindex;
    }
  )

local data_fn, err = load(input, '=stdin', 'bt', env)
if not data_fn then
  error('failed to read data: ' .. tostring(err))
end

local strict_index = function(t, k)
    error(
        'data attempted to read from global \''
        .. (tostring(k) or '(?)')
        .. '\' while loading',
        2
      )
  end

local index
if EXPOSE_G then
  index = _G
  if not NO_STRICT then
    setmetatable(
        _G,
        {
          __metatable = 'lua2yaml._G';
          __index = strict_index;
        }
      )
  end
else
  index = NO_STRICT
    and function(t, k) return nil end
     or strict_index
end

local newindex = NO_STRICT
  and function(t, k, v)
        rawset(t, k, v)
      end
   or function(t, k, v)
        error(
            'data attempted to write to global \''
            .. (tostring(k) or '(?)')
            .. '\' while loading',
            2
          )
      end

local ok, data = xpcall(data_fn, function(msg) return debug.traceback(msg) end)
if not ok then
  local err = data
  error('failed to load data:\n' .. (err or 'nothing returned'))
end

local data = require('yaml').dump(data)

io.stdout:write(data)

io.stdout:flush()

"
